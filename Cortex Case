{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "52ad076b",
   "metadata": {
    "papermill": {
     "duration": 0.004815,
     "end_time": "2024-06-17T05:30:33.173368",
     "exception": false,
     "start_time": "2024-06-17T05:30:33.168553",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Modelo 1 - LSTM, CNN, ENSEMBLE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f3a2a40a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-17T05:30:33.184449Z",
     "iopub.status.busy": "2024-06-17T05:30:33.183607Z",
     "iopub.status.idle": "2024-06-17T05:30:46.079894Z",
     "shell.execute_reply": "2024-06-17T05:30:46.079119Z"
    },
    "papermill": {
     "duration": 12.904224,
     "end_time": "2024-06-17T05:30:46.082130",
     "exception": false,
     "start_time": "2024-06-17T05:30:33.177906",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-06-17 05:30:36.927314: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-06-17 05:30:36.927429: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-06-17 05:30:37.018159: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import re\n",
    "import nltk\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.tokenize import word_tokenize\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.metrics import accuracy_score, recall_score, f1_score\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Embedding, SpatialDropout1D, LSTM, Dense, Conv1D, GlobalMaxPooling1D, Dropout\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3dfe53fb",
   "metadata": {
    "papermill": {
     "duration": 0.004341,
     "end_time": "2024-06-17T05:30:46.091196",
     "exception": false,
     "start_time": "2024-06-17T05:30:46.086855",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## **Definições de funções** "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "92c6a41e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-17T05:30:46.101568Z",
     "iopub.status.busy": "2024-06-17T05:30:46.101007Z",
     "iopub.status.idle": "2024-06-17T05:30:46.112324Z",
     "shell.execute_reply": "2024-06-17T05:30:46.111460Z"
    },
    "papermill": {
     "duration": 0.018661,
     "end_time": "2024-06-17T05:30:46.114298",
     "exception": false,
     "start_time": "2024-06-17T05:30:46.095637",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#pré-processamento\n",
    "def clean_text(text):\n",
    "    #1 - minúsculas\n",
    "    #2 - remoção de espaços extras\n",
    "    #3 - remoção de urls\n",
    "    #4 - remove pontuações e caracteres especiais\n",
    "    #5 - remove digitos\n",
    "    text = text.lower()  \n",
    "    text = re.sub(r'\\s+', ' ', text) \n",
    "    text = re.sub(r'http\\S+', '', text)\n",
    "    text = re.sub(r'[^\\w\\s]', '', text)\n",
    "    text = re.sub(r'\\d', '', text)\n",
    "    return text\n",
    "\n",
    "\n",
    "#Modelo LSTM\n",
    "#1 - Camada de embedding -> transforma para vetores densos\n",
    "#2 - Camada de Dropout1D nas embeddings\n",
    "#3 - Camada LSTM -> 128 unidades, crom dropout e dropout recorrente\n",
    "#4 - Camada Densa com 1 saída, transformei em uma tarefa de classificação binária para ficar mais simples\n",
    "#e a camada tem um output de probabilidade, se for >0.5 vai ser 1, se for <0.5 vai ser 0.\n",
    "\n",
    "def lstm_model():\n",
    "    model = Sequential()\n",
    "    model.add(Embedding(input_dim=len(tokenizer.word_index)+1, output_dim=embedding_dim))\n",
    "    model.add(SpatialDropout1D(0.2))\n",
    "    model.add(LSTM(units=128, dropout=0.2, recurrent_dropout=0.2))\n",
    "    model.add(Dense(1, activation='sigmoid'))\n",
    "    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
    "    return model\n",
    "\n",
    "#Modelo CNN\n",
    "#1 - Camada de embedding -> transforma para vetores densos\n",
    "#2 - Camada de Dropout1D nas embeddings\n",
    "#3 - Camada de Convolução 1D - 128 unidades e ativação relu\n",
    "#4 - Camada de Dropout\n",
    "#5 - Camada de Convolução 1D - 32 unidades e ativação relu\n",
    "#6 - Camada de Dropout\n",
    "#7 - Camada de Global Max Pooling 1D\n",
    "#8 - Camada de saída, igual a do LSTM\n",
    "\n",
    "def cnn_model():\n",
    "    model = Sequential()\n",
    "    model.add(Embedding(input_dim=len(tokenizer.word_index)+1, output_dim=embedding_dim))\n",
    "    model.add(SpatialDropout1D(0.2))\n",
    "    model.add(Conv1D(filters=128, kernel_size=5, activation='relu'))\n",
    "    model.add(Dropout(0.2))\n",
    "    model.add(Conv1D(filters=32, kernel_size=5, activation='relu'))\n",
    "    model.add(Dropout(0.2))\n",
    "    model.add(GlobalMaxPooling1D())\n",
    "    model.add(Dense(1, activation='sigmoid'))\n",
    "    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a72ac8e4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-17T05:30:46.124541Z",
     "iopub.status.busy": "2024-06-17T05:30:46.123926Z",
     "iopub.status.idle": "2024-06-17T05:31:13.698262Z",
     "shell.execute_reply": "2024-06-17T05:31:13.697369Z"
    },
    "papermill": {
     "duration": 27.581848,
     "end_time": "2024-06-17T05:31:13.700517",
     "exception": false,
     "start_time": "2024-06-17T05:30:46.118669",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_csv = pd.read_excel(\"/kaggle/input/dados-case/dados_case_ds.xlsx\")\n",
    "\n",
    "df_csv['Conteúdo'] = df_csv['Conteúdo'].astype(str).apply(clean_text)\n",
    "\n",
    "#Remoção de stopwords e tokenização\n",
    "stop_words = set(stopwords.words('portuguese'))\n",
    "df_csv['Conteúdo'] = df_csv['Conteúdo'].apply(word_tokenize)\n",
    "df_csv['Conteúdo'] = df_csv['Conteúdo'].apply(lambda x: [word for word in x if word not in stop_words])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c285545a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-17T05:31:13.711139Z",
     "iopub.status.busy": "2024-06-17T05:31:13.710638Z",
     "iopub.status.idle": "2024-06-17T05:31:13.729551Z",
     "shell.execute_reply": "2024-06-17T05:31:13.728660Z"
    },
    "papermill": {
     "duration": 0.026286,
     "end_time": "2024-06-17T05:31:13.731568",
     "exception": false,
     "start_time": "2024-06-17T05:31:13.705282",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sentimento</th>\n",
       "      <th>Título</th>\n",
       "      <th>Conteúdo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Positivo</td>\n",
       "      <td>Dono da Cyrela gaúcha pede doação, gasta com a...</td>\n",
       "      <td>[tragédia, decorrente, temporais, rio, grande,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Positivo</td>\n",
       "      <td>Operadoras de telefonia reforçam sinal de inte...</td>\n",
       "      <td>[previsão, milhão, pessoas, praia, copacabana,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Positivo</td>\n",
       "      <td>Chuvas no RS: uso de internet cai pela metade ...</td>\n",
       "      <td>[chuvas, rs, uso, internet, cai, metade, obstá...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Positivo</td>\n",
       "      <td>Vagas</td>\n",
       "      <td>[vagas, grupo, img, international, meai, compa...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Positivo</td>\n",
       "      <td>Operadoras dão gigabytes extras para quem cont...</td>\n",
       "      <td>[operadoras, dão, gigabytes, extras, contratar...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Sentimento                                             Título  \\\n",
       "0   Positivo  Dono da Cyrela gaúcha pede doação, gasta com a...   \n",
       "1   Positivo  Operadoras de telefonia reforçam sinal de inte...   \n",
       "2   Positivo  Chuvas no RS: uso de internet cai pela metade ...   \n",
       "3   Positivo                                              Vagas   \n",
       "4   Positivo  Operadoras dão gigabytes extras para quem cont...   \n",
       "\n",
       "                                            Conteúdo  \n",
       "0  [tragédia, decorrente, temporais, rio, grande,...  \n",
       "1  [previsão, milhão, pessoas, praia, copacabana,...  \n",
       "2  [chuvas, rs, uso, internet, cai, metade, obstá...  \n",
       "3  [vagas, grupo, img, international, meai, compa...  \n",
       "4  [operadoras, dão, gigabytes, extras, contratar...  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_csv.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1b65bca1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-17T05:31:13.741778Z",
     "iopub.status.busy": "2024-06-17T05:31:13.741517Z",
     "iopub.status.idle": "2024-06-17T05:31:16.017875Z",
     "shell.execute_reply": "2024-06-17T05:31:16.017112Z"
    },
    "papermill": {
     "duration": 2.284186,
     "end_time": "2024-06-17T05:31:16.020391",
     "exception": false,
     "start_time": "2024-06-17T05:31:13.736205",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#mapear os rótulos\n",
    "label_encoder = LabelEncoder()\n",
    "df_csv['Sentimento'] = label_encoder.fit_transform(df_csv['Sentimento'])\n",
    "\n",
    "#vetorização\n",
    "tokenizer = Tokenizer()\n",
    "tokenizer.fit_on_texts(df_csv['Conteúdo'])\n",
    "X_train_sequences = tokenizer.texts_to_sequences(df_csv['Conteúdo'])\n",
    "\n",
    "#limitar para 100 caracteres\n",
    "max_length = 100\n",
    "X_train_padded = pad_sequences(X_train_sequences, maxlen=max_length, padding='post')\n",
    "\n",
    "#conveter para númerico\n",
    "y_train = df_csv['Sentimento'].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c3e2f52f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-17T05:31:16.031462Z",
     "iopub.status.busy": "2024-06-17T05:31:16.031194Z",
     "iopub.status.idle": "2024-06-17T05:31:16.035170Z",
     "shell.execute_reply": "2024-06-17T05:31:16.034320Z"
    },
    "papermill": {
     "duration": 0.011485,
     "end_time": "2024-06-17T05:31:16.037009",
     "exception": false,
     "start_time": "2024-06-17T05:31:16.025524",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "embedding_dim = 100\n",
    "batch_size = 32\n",
    "epochs =10"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bbcfb496",
   "metadata": {
    "papermill": {
     "duration": 0.004431,
     "end_time": "2024-06-17T05:31:16.046204",
     "exception": false,
     "start_time": "2024-06-17T05:31:16.041773",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Teste 1 -  LSTM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "070d45dd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-17T05:31:16.056841Z",
     "iopub.status.busy": "2024-06-17T05:31:16.056566Z",
     "iopub.status.idle": "2024-06-17T05:45:57.880933Z",
     "shell.execute_reply": "2024-06-17T05:45:57.879580Z"
    },
    "papermill": {
     "duration": 881.832865,
     "end_time": "2024-06-17T05:45:57.883697",
     "exception": false,
     "start_time": "2024-06-17T05:31:16.050832",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "FOLD 0\n",
      "Epoch 1/10\n",
      "130/130 - 23s - 176ms/step - accuracy: 0.8753 - loss: 0.3359\n",
      "Epoch 2/10\n",
      "130/130 - 17s - 128ms/step - accuracy: 0.9442 - loss: 0.1968\n",
      "Epoch 3/10\n",
      "130/130 - 16s - 127ms/step - accuracy: 0.9461 - loss: 0.1851\n",
      "Epoch 4/10\n",
      "130/130 - 16s - 126ms/step - accuracy: 0.9504 - loss: 0.1472\n",
      "Epoch 5/10\n",
      "130/130 - 21s - 158ms/step - accuracy: 0.9627 - loss: 0.1066\n",
      "Epoch 6/10\n",
      "130/130 - 16s - 126ms/step - accuracy: 0.9668 - loss: 0.1009\n",
      "Epoch 7/10\n",
      "130/130 - 17s - 129ms/step - accuracy: 0.9689 - loss: 0.0944\n",
      "Epoch 8/10\n",
      "130/130 - 17s - 129ms/step - accuracy: 0.9742 - loss: 0.0785\n",
      "Epoch 9/10\n",
      "130/130 - 16s - 124ms/step - accuracy: 0.9762 - loss: 0.0707\n",
      "Epoch 10/10\n",
      "130/130 - 17s - 127ms/step - accuracy: 0.9810 - loss: 0.0569\n",
      "\n",
      "FOLD 1\n",
      "Epoch 1/10\n",
      "130/130 - 18s - 137ms/step - accuracy: 0.8676 - loss: 0.3431\n",
      "Epoch 2/10\n",
      "130/130 - 16s - 123ms/step - accuracy: 0.9340 - loss: 0.2158\n",
      "Epoch 3/10\n",
      "130/130 - 16s - 120ms/step - accuracy: 0.9425 - loss: 0.1837\n",
      "Epoch 4/10\n",
      "130/130 - 20s - 157ms/step - accuracy: 0.9494 - loss: 0.1528\n",
      "Epoch 5/10\n",
      "130/130 - 15s - 117ms/step - accuracy: 0.9547 - loss: 0.1260\n",
      "Epoch 6/10\n",
      "130/130 - 21s - 160ms/step - accuracy: 0.9622 - loss: 0.1023\n",
      "Epoch 7/10\n",
      "130/130 - 21s - 159ms/step - accuracy: 0.9687 - loss: 0.0873\n",
      "Epoch 8/10\n",
      "130/130 - 15s - 117ms/step - accuracy: 0.9668 - loss: 0.0920\n",
      "Epoch 9/10\n",
      "130/130 - 16s - 122ms/step - accuracy: 0.9439 - loss: 0.1527\n",
      "Epoch 10/10\n",
      "130/130 - 16s - 120ms/step - accuracy: 0.9682 - loss: 0.0964\n",
      "\n",
      "FOLD 2\n",
      "Epoch 1/10\n",
      "130/130 - 20s - 151ms/step - accuracy: 0.8587 - loss: 0.3429\n",
      "Epoch 2/10\n",
      "130/130 - 18s - 136ms/step - accuracy: 0.9355 - loss: 0.2264\n",
      "Epoch 3/10\n",
      "130/130 - 17s - 134ms/step - accuracy: 0.9461 - loss: 0.1820\n",
      "Epoch 4/10\n",
      "130/130 - 17s - 134ms/step - accuracy: 0.9579 - loss: 0.1358\n",
      "Epoch 5/10\n",
      "130/130 - 17s - 130ms/step - accuracy: 0.9579 - loss: 0.1245\n",
      "Epoch 6/10\n",
      "130/130 - 17s - 133ms/step - accuracy: 0.9663 - loss: 0.0960\n",
      "Epoch 7/10\n",
      "130/130 - 17s - 130ms/step - accuracy: 0.9718 - loss: 0.0907\n",
      "Epoch 8/10\n",
      "130/130 - 17s - 132ms/step - accuracy: 0.9738 - loss: 0.0737\n",
      "Epoch 9/10\n",
      "130/130 - 17s - 131ms/step - accuracy: 0.9762 - loss: 0.0695\n",
      "Epoch 10/10\n",
      "130/130 - 18s - 136ms/step - accuracy: 0.9764 - loss: 0.0692\n",
      "\n",
      "FOLD 3\n",
      "Epoch 1/10\n",
      "130/130 - 19s - 149ms/step - accuracy: 0.8676 - loss: 0.3394\n",
      "Epoch 2/10\n",
      "130/130 - 16s - 125ms/step - accuracy: 0.9497 - loss: 0.1840\n",
      "Epoch 3/10\n",
      "130/130 - 17s - 128ms/step - accuracy: 0.9509 - loss: 0.1718\n",
      "Epoch 4/10\n",
      "130/130 - 17s - 129ms/step - accuracy: 0.9545 - loss: 0.1353\n",
      "Epoch 5/10\n",
      "130/130 - 17s - 127ms/step - accuracy: 0.9670 - loss: 0.1065\n",
      "Epoch 6/10\n",
      "130/130 - 16s - 125ms/step - accuracy: 0.9714 - loss: 0.0891\n",
      "Epoch 7/10\n",
      "130/130 - 17s - 128ms/step - accuracy: 0.9726 - loss: 0.0851\n",
      "Epoch 8/10\n",
      "130/130 - 16s - 124ms/step - accuracy: 0.9757 - loss: 0.0729\n",
      "Epoch 9/10\n",
      "130/130 - 17s - 127ms/step - accuracy: 0.9786 - loss: 0.0642\n",
      "Epoch 10/10\n",
      "130/130 - 16s - 124ms/step - accuracy: 0.9812 - loss: 0.0563\n",
      "\n",
      "FOLD 4\n",
      "Epoch 1/10\n",
      "130/130 - 20s - 154ms/step - accuracy: 0.8691 - loss: 0.3540\n",
      "Epoch 2/10\n",
      "130/130 - 18s - 136ms/step - accuracy: 0.9085 - loss: 0.2853\n",
      "Epoch 3/10\n",
      "130/130 - 17s - 133ms/step - accuracy: 0.9230 - loss: 0.2285\n",
      "Epoch 4/10\n",
      "130/130 - 18s - 137ms/step - accuracy: 0.9521 - loss: 0.1492\n",
      "Epoch 5/10\n",
      "130/130 - 17s - 133ms/step - accuracy: 0.9637 - loss: 0.1167\n",
      "Epoch 6/10\n",
      "130/130 - 18s - 135ms/step - accuracy: 0.9637 - loss: 0.1108\n",
      "Epoch 7/10\n",
      "130/130 - 17s - 129ms/step - accuracy: 0.9670 - loss: 0.0967\n",
      "Epoch 8/10\n",
      "130/130 - 18s - 135ms/step - accuracy: 0.9721 - loss: 0.0776\n",
      "Epoch 9/10\n",
      "130/130 - 18s - 135ms/step - accuracy: 0.9733 - loss: 0.0795\n",
      "Epoch 10/10\n",
      "130/130 - 18s - 135ms/step - accuracy: 0.9764 - loss: 0.0699\n",
      "Acuracia: 0.924710287237061\n",
      "Recall: 0.933024727992087\n",
      "F1-score: 0.941071343967091\n"
     ]
    }
   ],
   "source": [
    "accuracy = []\n",
    "recall = []\n",
    "f1 = []\n",
    "k = 0\n",
    "\n",
    "#k-fold estratificado com k=5\n",
    "skf = StratifiedKFold(n_splits=5, shuffle=True)\n",
    "\n",
    "for train_index, test_index in skf.split(X_train_padded, y_train):\n",
    "    \n",
    "    print(f\"\\nFOLD {k}\")\n",
    "    X_train_fold, X_test_fold = X_train_padded[train_index], X_train_padded[test_index]\n",
    "    y_train_fold, y_test_fold = y_train[train_index], y_train[test_index]\n",
    "    \n",
    "    model = lstm_model()\n",
    "    model.fit(X_train_fold, y_train_fold, epochs=epochs, batch_size=batch_size, verbose=2)\n",
    "\n",
    "    y_pred_proba = model.predict(X_test_fold, verbose=0)\n",
    "    y_pred_fold = (y_pred_proba > 0.5).astype(int)  \n",
    "    acc = accuracy_score(y_test_fold, y_pred_fold)\n",
    "    rec = recall_score(y_test_fold, y_pred_fold)\n",
    "    f = f1_score(y_test_fold, y_pred_fold)\n",
    "    \n",
    "    #Resultados\n",
    "    accuracy.append(acc)\n",
    "    recall.append(rec)\n",
    "    f1.append(f)\n",
    "    k+=1\n",
    "\n",
    "mean_accuracy = np.mean(accuracy)\n",
    "mean_recall = np.mean(recall)\n",
    "mean_f1 = np.mean(f1)\n",
    "\n",
    "print(f'Acuracia: {mean_accuracy}')\n",
    "print(f'Recall: {mean_recall}')\n",
    "print(f'F1-score: {mean_f1}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9300762f",
   "metadata": {
    "papermill": {
     "duration": 0.012354,
     "end_time": "2024-06-17T05:45:57.908750",
     "exception": false,
     "start_time": "2024-06-17T05:45:57.896396",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Teste 2 - CNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cd9b1233",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-17T05:45:57.934807Z",
     "iopub.status.busy": "2024-06-17T05:45:57.934260Z",
     "iopub.status.idle": "2024-06-17T05:47:18.077238Z",
     "shell.execute_reply": "2024-06-17T05:47:18.076075Z"
    },
    "papermill": {
     "duration": 80.158366,
     "end_time": "2024-06-17T05:47:18.079359",
     "exception": false,
     "start_time": "2024-06-17T05:45:57.920993",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "FOLD 0\n",
      "Epoch 1/10\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1718603165.936804      74 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "130/130 - 14s - 107ms/step - accuracy: 0.8286 - loss: 0.3572\n",
      "Epoch 2/10\n",
      "130/130 - 1s - 4ms/step - accuracy: 0.9540 - loss: 0.1360\n",
      "Epoch 3/10\n",
      "130/130 - 1s - 4ms/step - accuracy: 0.9687 - loss: 0.0881\n",
      "Epoch 4/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9769 - loss: 0.0656\n",
      "Epoch 5/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9810 - loss: 0.0542\n",
      "Epoch 6/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9827 - loss: 0.0506\n",
      "Epoch 7/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9824 - loss: 0.0493\n",
      "Epoch 8/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9822 - loss: 0.0484\n",
      "Epoch 9/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9848 - loss: 0.0429\n",
      "Epoch 10/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9819 - loss: 0.0484\n",
      "\n",
      "FOLD 1\n",
      "Epoch 1/10\n",
      "130/130 - 10s - 76ms/step - accuracy: 0.8370 - loss: 0.3551\n",
      "Epoch 2/10\n",
      "130/130 - 1s - 4ms/step - accuracy: 0.9528 - loss: 0.1331\n",
      "Epoch 3/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9709 - loss: 0.0909\n",
      "Epoch 4/10\n",
      "130/130 - 1s - 5ms/step - accuracy: 0.9798 - loss: 0.0727\n",
      "Epoch 5/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9786 - loss: 0.0649\n",
      "Epoch 6/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9807 - loss: 0.0582\n",
      "Epoch 7/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9812 - loss: 0.0562\n",
      "Epoch 8/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9822 - loss: 0.0510\n",
      "Epoch 9/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9836 - loss: 0.0469\n",
      "Epoch 10/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9858 - loss: 0.0448\n",
      "\n",
      "FOLD 2\n",
      "Epoch 1/10\n",
      "130/130 - 10s - 75ms/step - accuracy: 0.8245 - loss: 0.3577\n",
      "Epoch 2/10\n",
      "130/130 - 1s - 4ms/step - accuracy: 0.9497 - loss: 0.1337\n",
      "Epoch 3/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9718 - loss: 0.0830\n",
      "Epoch 4/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9798 - loss: 0.0654\n",
      "Epoch 5/10\n",
      "130/130 - 0s - 4ms/step - accuracy: 0.9805 - loss: 0.0589\n",
      "Epoch 6/10\n",
      "130/130 - 1s - 5ms/step - accuracy: 0.9848 - loss: 0.0503\n",
      "Epoch 7/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9812 - loss: 0.0526\n",
      "Epoch 8/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9831 - loss: 0.0477\n",
      "Epoch 9/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9844 - loss: 0.0434\n",
      "Epoch 10/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9865 - loss: 0.0393\n",
      "\n",
      "FOLD 3\n",
      "Epoch 1/10\n",
      "130/130 - 12s - 89ms/step - accuracy: 0.8301 - loss: 0.3619\n",
      "Epoch 2/10\n",
      "130/130 - 1s - 4ms/step - accuracy: 0.9509 - loss: 0.1352\n",
      "Epoch 3/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9711 - loss: 0.0863\n",
      "Epoch 4/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9788 - loss: 0.0650\n",
      "Epoch 5/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9783 - loss: 0.0611\n",
      "Epoch 6/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9817 - loss: 0.0547\n",
      "Epoch 7/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9824 - loss: 0.0481\n",
      "Epoch 8/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9836 - loss: 0.0440\n",
      "Epoch 9/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9856 - loss: 0.0440\n",
      "Epoch 10/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9853 - loss: 0.0447\n",
      "\n",
      "FOLD 4\n",
      "Epoch 1/10\n",
      "130/130 - 11s - 82ms/step - accuracy: 0.8262 - loss: 0.3582\n",
      "Epoch 2/10\n",
      "130/130 - 1s - 4ms/step - accuracy: 0.9564 - loss: 0.1322\n",
      "Epoch 3/10\n",
      "130/130 - 0s - 4ms/step - accuracy: 0.9697 - loss: 0.0878\n",
      "Epoch 4/10\n",
      "130/130 - 1s - 5ms/step - accuracy: 0.9759 - loss: 0.0659\n",
      "Epoch 5/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9817 - loss: 0.0550\n",
      "Epoch 6/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9829 - loss: 0.0542\n",
      "Epoch 7/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9832 - loss: 0.0488\n",
      "Epoch 8/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9851 - loss: 0.0437\n",
      "Epoch 9/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9858 - loss: 0.0457\n",
      "Epoch 10/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9872 - loss: 0.0400\n",
      "Acuracia: 0.9397284331124673\n",
      "Recall: 0.9614718100890208\n",
      "F1-score: 0.9539723392063155\n"
     ]
    }
   ],
   "source": [
    "accuracy = []\n",
    "recall = []\n",
    "f1 = []\n",
    "k = 0\n",
    "\n",
    "#k-fold estratificado com k=5\n",
    "skf = StratifiedKFold(n_splits=5, shuffle=True)\n",
    "\n",
    "for train_index, test_index in skf.split(X_train_padded, y_train):\n",
    "    \n",
    "    print(f\"\\nFOLD {k}\")\n",
    "    X_train_fold, X_test_fold = X_train_padded[train_index], X_train_padded[test_index]\n",
    "    y_train_fold, y_test_fold = y_train[train_index], y_train[test_index]\n",
    "    \n",
    "    model = cnn_model()\n",
    "    model.fit(X_train_fold, y_train_fold, epochs=epochs, batch_size=batch_size, verbose=2)\n",
    "\n",
    "    y_pred_proba = model.predict(X_test_fold, verbose=0)\n",
    "    y_pred_fold = (y_pred_proba > 0.5).astype(int)  \n",
    "    acc = accuracy_score(y_test_fold, y_pred_fold)\n",
    "    rec = recall_score(y_test_fold, y_pred_fold)\n",
    "    f = f1_score(y_test_fold, y_pred_fold)\n",
    "    \n",
    "    #Resultados\n",
    "    accuracy.append(acc)\n",
    "    recall.append(rec)\n",
    "    f1.append(f)\n",
    "    k+=1\n",
    "\n",
    "mean_accuracy = np.mean(accuracy)\n",
    "mean_recall = np.mean(recall)\n",
    "mean_f1 = np.mean(f1)\n",
    "\n",
    "print(f'Acuracia: {mean_accuracy}')\n",
    "print(f'Recall: {mean_recall}')\n",
    "print(f'F1-score: {mean_f1}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2bbe3b4c",
   "metadata": {
    "papermill": {
     "duration": 0.019623,
     "end_time": "2024-06-17T05:47:18.119846",
     "exception": false,
     "start_time": "2024-06-17T05:47:18.100223",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Teste 3 - Ensemble"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6423253d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-17T05:47:18.161265Z",
     "iopub.status.busy": "2024-06-17T05:47:18.160935Z",
     "iopub.status.idle": "2024-06-17T06:04:41.079108Z",
     "shell.execute_reply": "2024-06-17T06:04:41.078115Z"
    },
    "papermill": {
     "duration": 1042.94151,
     "end_time": "2024-06-17T06:04:41.081274",
     "exception": false,
     "start_time": "2024-06-17T05:47:18.139764",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "FOLD 0\n",
      "Epoch 1/10\n",
      "130/130 - 21s - 159ms/step - accuracy: 0.8618 - loss: 0.3490\n",
      "Epoch 2/10\n",
      "130/130 - 19s - 143ms/step - accuracy: 0.9369 - loss: 0.2179\n",
      "Epoch 3/10\n",
      "130/130 - 18s - 142ms/step - accuracy: 0.9485 - loss: 0.1685\n",
      "Epoch 4/10\n",
      "130/130 - 18s - 141ms/step - accuracy: 0.9538 - loss: 0.1343\n",
      "Epoch 5/10\n",
      "130/130 - 18s - 141ms/step - accuracy: 0.9555 - loss: 0.1168\n",
      "Epoch 6/10\n",
      "130/130 - 19s - 143ms/step - accuracy: 0.9661 - loss: 0.0990\n",
      "Epoch 7/10\n",
      "130/130 - 19s - 142ms/step - accuracy: 0.9723 - loss: 0.0869\n",
      "Epoch 8/10\n",
      "130/130 - 19s - 144ms/step - accuracy: 0.9745 - loss: 0.0763\n",
      "Epoch 9/10\n",
      "130/130 - 20s - 156ms/step - accuracy: 0.9774 - loss: 0.0688\n",
      "Epoch 10/10\n",
      "130/130 - 19s - 144ms/step - accuracy: 0.9788 - loss: 0.0621\n",
      "Epoch 1/10\n",
      "130/130 - 10s - 79ms/step - accuracy: 0.8238 - loss: 0.3738\n",
      "Epoch 2/10\n",
      "130/130 - 1s - 4ms/step - accuracy: 0.9533 - loss: 0.1411\n",
      "Epoch 3/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9692 - loss: 0.0949\n",
      "Epoch 4/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9752 - loss: 0.0783\n",
      "Epoch 5/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9791 - loss: 0.0641\n",
      "Epoch 6/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9788 - loss: 0.0627\n",
      "Epoch 7/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9805 - loss: 0.0585\n",
      "Epoch 8/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9798 - loss: 0.0551\n",
      "Epoch 9/10\n",
      "130/130 - 1s - 5ms/step - accuracy: 0.9822 - loss: 0.0537\n",
      "Epoch 10/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9827 - loss: 0.0518\n",
      "\n",
      "FOLD 1\n",
      "Epoch 1/10\n",
      "130/130 - 21s - 161ms/step - accuracy: 0.8671 - loss: 0.3586\n",
      "Epoch 2/10\n",
      "130/130 - 18s - 142ms/step - accuracy: 0.9405 - loss: 0.2015\n",
      "Epoch 3/10\n",
      "130/130 - 18s - 142ms/step - accuracy: 0.9559 - loss: 0.1494\n",
      "Epoch 4/10\n",
      "130/130 - 21s - 160ms/step - accuracy: 0.9673 - loss: 0.1052\n",
      "Epoch 5/10\n",
      "130/130 - 18s - 140ms/step - accuracy: 0.9701 - loss: 0.0897\n",
      "Epoch 6/10\n",
      "130/130 - 21s - 161ms/step - accuracy: 0.9658 - loss: 0.1065\n",
      "Epoch 7/10\n",
      "130/130 - 19s - 144ms/step - accuracy: 0.9738 - loss: 0.0806\n",
      "Epoch 8/10\n",
      "130/130 - 20s - 153ms/step - accuracy: 0.9766 - loss: 0.0674\n",
      "Epoch 9/10\n",
      "130/130 - 19s - 144ms/step - accuracy: 0.9757 - loss: 0.0720\n",
      "Epoch 10/10\n",
      "130/130 - 19s - 144ms/step - accuracy: 0.9747 - loss: 0.0797\n",
      "Epoch 1/10\n",
      "130/130 - 10s - 79ms/step - accuracy: 0.8390 - loss: 0.3585\n",
      "Epoch 2/10\n",
      "130/130 - 1s - 4ms/step - accuracy: 0.9526 - loss: 0.1335\n",
      "Epoch 3/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9711 - loss: 0.0823\n",
      "Epoch 4/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9754 - loss: 0.0673\n",
      "Epoch 5/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9783 - loss: 0.0631\n",
      "Epoch 6/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9803 - loss: 0.0535\n",
      "Epoch 7/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9810 - loss: 0.0495\n",
      "Epoch 8/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9812 - loss: 0.0470\n",
      "Epoch 9/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9839 - loss: 0.0435\n",
      "Epoch 10/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9846 - loss: 0.0439\n",
      "\n",
      "FOLD 2\n",
      "Epoch 1/10\n",
      "130/130 - 22s - 169ms/step - accuracy: 0.8645 - loss: 0.3576\n",
      "Epoch 2/10\n",
      "130/130 - 19s - 146ms/step - accuracy: 0.9302 - loss: 0.2203\n",
      "Epoch 3/10\n",
      "130/130 - 21s - 159ms/step - accuracy: 0.9502 - loss: 0.1638\n",
      "Epoch 4/10\n",
      "130/130 - 19s - 146ms/step - accuracy: 0.9598 - loss: 0.1269\n",
      "Epoch 5/10\n",
      "130/130 - 20s - 157ms/step - accuracy: 0.9641 - loss: 0.1126\n",
      "Epoch 6/10\n",
      "130/130 - 19s - 148ms/step - accuracy: 0.9750 - loss: 0.0833\n",
      "Epoch 7/10\n",
      "130/130 - 19s - 143ms/step - accuracy: 0.9730 - loss: 0.0833\n",
      "Epoch 8/10\n",
      "130/130 - 19s - 147ms/step - accuracy: 0.9677 - loss: 0.0969\n",
      "Epoch 9/10\n",
      "130/130 - 21s - 158ms/step - accuracy: 0.9721 - loss: 0.0815\n",
      "Epoch 10/10\n",
      "130/130 - 19s - 147ms/step - accuracy: 0.9754 - loss: 0.0725\n",
      "Epoch 1/10\n",
      "130/130 - 10s - 80ms/step - accuracy: 0.8219 - loss: 0.3649\n",
      "Epoch 2/10\n",
      "130/130 - 1s - 4ms/step - accuracy: 0.9535 - loss: 0.1352\n",
      "Epoch 3/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9721 - loss: 0.0854\n",
      "Epoch 4/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9774 - loss: 0.0665\n",
      "Epoch 5/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9803 - loss: 0.0562\n",
      "Epoch 6/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9834 - loss: 0.0496\n",
      "Epoch 7/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9836 - loss: 0.0481\n",
      "Epoch 8/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9846 - loss: 0.0480\n",
      "Epoch 9/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9868 - loss: 0.0415\n",
      "Epoch 10/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9848 - loss: 0.0404\n",
      "\n",
      "FOLD 3\n",
      "Epoch 1/10\n",
      "130/130 - 21s - 160ms/step - accuracy: 0.8722 - loss: 0.3320\n",
      "Epoch 2/10\n",
      "130/130 - 21s - 159ms/step - accuracy: 0.9418 - loss: 0.2090\n",
      "Epoch 3/10\n",
      "130/130 - 18s - 140ms/step - accuracy: 0.9521 - loss: 0.1583\n",
      "Epoch 4/10\n",
      "130/130 - 18s - 138ms/step - accuracy: 0.9564 - loss: 0.1370\n",
      "Epoch 5/10\n",
      "130/130 - 18s - 141ms/step - accuracy: 0.9605 - loss: 0.1137\n",
      "Epoch 6/10\n",
      "130/130 - 20s - 156ms/step - accuracy: 0.9639 - loss: 0.1017\n",
      "Epoch 7/10\n",
      "130/130 - 18s - 141ms/step - accuracy: 0.9656 - loss: 0.1063\n",
      "Epoch 8/10\n",
      "130/130 - 18s - 142ms/step - accuracy: 0.9728 - loss: 0.0854\n",
      "Epoch 9/10\n",
      "130/130 - 18s - 140ms/step - accuracy: 0.9781 - loss: 0.0677\n",
      "Epoch 10/10\n",
      "130/130 - 18s - 141ms/step - accuracy: 0.9757 - loss: 0.0722\n",
      "Epoch 1/10\n",
      "130/130 - 10s - 79ms/step - accuracy: 0.8310 - loss: 0.3528\n",
      "Epoch 2/10\n",
      "130/130 - 1s - 4ms/step - accuracy: 0.9562 - loss: 0.1326\n",
      "Epoch 3/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9714 - loss: 0.0847\n",
      "Epoch 4/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9767 - loss: 0.0671\n",
      "Epoch 5/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9795 - loss: 0.0644\n",
      "Epoch 6/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9791 - loss: 0.0586\n",
      "Epoch 7/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9810 - loss: 0.0544\n",
      "Epoch 8/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9817 - loss: 0.0507\n",
      "Epoch 9/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9824 - loss: 0.0464\n",
      "Epoch 10/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9829 - loss: 0.0468\n",
      "\n",
      "FOLD 4\n",
      "Epoch 1/10\n",
      "130/130 - 21s - 164ms/step - accuracy: 0.8623 - loss: 0.3652\n",
      "Epoch 2/10\n",
      "130/130 - 19s - 142ms/step - accuracy: 0.9300 - loss: 0.2326\n",
      "Epoch 3/10\n",
      "130/130 - 19s - 143ms/step - accuracy: 0.9372 - loss: 0.1883\n",
      "Epoch 4/10\n",
      "130/130 - 19s - 144ms/step - accuracy: 0.9511 - loss: 0.1399\n",
      "Epoch 5/10\n",
      "130/130 - 18s - 140ms/step - accuracy: 0.9613 - loss: 0.1069\n",
      "Epoch 6/10\n",
      "130/130 - 19s - 143ms/step - accuracy: 0.9644 - loss: 0.0968\n",
      "Epoch 7/10\n",
      "130/130 - 18s - 142ms/step - accuracy: 0.9694 - loss: 0.0915\n",
      "Epoch 8/10\n",
      "130/130 - 19s - 143ms/step - accuracy: 0.9723 - loss: 0.0805\n",
      "Epoch 9/10\n",
      "130/130 - 20s - 156ms/step - accuracy: 0.9714 - loss: 0.0818\n",
      "Epoch 10/10\n",
      "130/130 - 19s - 144ms/step - accuracy: 0.9757 - loss: 0.0696\n",
      "Epoch 1/10\n",
      "130/130 - 10s - 80ms/step - accuracy: 0.8270 - loss: 0.3696\n",
      "Epoch 2/10\n",
      "130/130 - 1s - 4ms/step - accuracy: 0.9545 - loss: 0.1356\n",
      "Epoch 3/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9716 - loss: 0.0857\n",
      "Epoch 4/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9781 - loss: 0.0710\n",
      "Epoch 5/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9798 - loss: 0.0610\n",
      "Epoch 6/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9815 - loss: 0.0540\n",
      "Epoch 7/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9836 - loss: 0.0513\n",
      "Epoch 8/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9829 - loss: 0.0541\n",
      "Epoch 9/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9836 - loss: 0.0461\n",
      "Epoch 10/10\n",
      "130/130 - 0s - 3ms/step - accuracy: 0.9844 - loss: 0.0481\n",
      "Acuracia: 0.9426147121602402\n",
      "Recall: 0.9641367183206946\n",
      "F1-score: 0.9562203281887788\n"
     ]
    }
   ],
   "source": [
    "accuracy = []\n",
    "recall = []\n",
    "f1 = []\n",
    "k = 0\n",
    "\n",
    "#K-fold estratificado com k=5\n",
    "skf = StratifiedKFold(n_splits=5, shuffle=True)\n",
    "\n",
    "for train_index, test_index in skf.split(X_train_padded, y_train):\n",
    "    print(f\"\\nFOLD {k}\")\n",
    "    X_train_fold, X_test_fold = X_train_padded[train_index], X_train_padded[test_index]\n",
    "    y_train_fold, y_test_fold = y_train[train_index], y_train[test_index]\n",
    "    \n",
    "    #LSTM\n",
    "    lstm = lstm_model()\n",
    "    lstm.fit(X_train_fold, y_train_fold, epochs=epochs, batch_size=batch_size, verbose=2)\n",
    "    y_pred_proba_lstm = lstm.predict(X_test_fold, verbose=0)\n",
    "    \n",
    "    #CNN\n",
    "    cnn = cnn_model()\n",
    "    cnn.fit(X_train_fold, y_train_fold, epochs=epochs, batch_size=batch_size, verbose=2)\n",
    "    y_pred_proba_cnn = cnn.predict(X_test_fold, verbose=0)\n",
    "    \n",
    "    #Votação 0.4 a 0.6 de peso para cada modelo\n",
    "    y_pred_proba = (0.4*y_pred_proba_lstm + 0.6*y_pred_proba_cnn) \n",
    "    y_pred_fold = (y_pred_proba > 0.5).astype(int)\n",
    "    \n",
    "    #Resultados\n",
    "    acc = accuracy_score(y_test_fold, y_pred_fold)\n",
    "    rec = recall_score(y_test_fold, y_pred_fold)\n",
    "    f = f1_score(y_test_fold, y_pred_fold)\n",
    "    \n",
    "    accuracy.append(acc)\n",
    "    recall.append(rec)\n",
    "    f1.append(f)\n",
    "    k += 1\n",
    "\n",
    "mean_accuracy = np.mean(accuracy)\n",
    "mean_recall = np.mean(recall)\n",
    "mean_f1 = np.mean(f1)\n",
    "\n",
    "print(f'Acuracia: {mean_accuracy}')\n",
    "print(f'Recall: {mean_recall}')\n",
    "print(f'F1-score: {mean_f1}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fcf30514",
   "metadata": {
    "papermill": {
     "duration": 0.035884,
     "end_time": "2024-06-17T06:04:41.152540",
     "exception": false,
     "start_time": "2024-06-17T06:04:41.116656",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 5216680,
     "sourceId": 8698288,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2054.01457,
   "end_time": "2024-06-17T06:04:44.542636",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-17T05:30:30.528066",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
