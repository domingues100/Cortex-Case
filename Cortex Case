{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":8698288,"sourceType":"datasetVersion","datasetId":5216680}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Modelo 1 - LSTM, CNN, ENSEMBLE","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport re\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import accuracy_score, recall_score, f1_score\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Embedding, SpatialDropout1D, LSTM, Dense, Conv1D, GlobalMaxPooling1D, Dropout\nfrom sklearn.preprocessing import LabelEncoder\nfrom tensorflow.keras.preprocessing.text import Tokenizer","metadata":{"execution":{"iopub.status.busy":"2024-06-17T04:35:23.333405Z","iopub.execute_input":"2024-06-17T04:35:23.334048Z","iopub.status.idle":"2024-06-17T04:35:23.340937Z","shell.execute_reply.started":"2024-06-17T04:35:23.334017Z","shell.execute_reply":"2024-06-17T04:35:23.340066Z"},"trusted":true},"execution_count":48,"outputs":[]},{"cell_type":"markdown","source":"## **Definições de funções** ","metadata":{}},{"cell_type":"code","source":"#pré-processamento\ndef clean_text(text):\n    #1 - minúsculas\n    #2 - remoção de espaços extras\n    #3 - remoção de urls\n    #4 - remove pontuações e caracteres especiais\n    #5 - remove digitos\n    text = text.lower()  \n    text = re.sub(r'\\s+', ' ', text) \n    text = re.sub(r'http\\S+', '', text)\n    text = re.sub(r'[^\\w\\s]', '', text)\n    text = re.sub(r'\\d', '', text)\n    return text\n\n\n#Modelo LSTM\n#1 - Camada de embedding -> transforma para vetores densos\n#2 - Camada de Dropout1D nas embeddings\n#3 - Camada LSTM -> 128 unidades, crom dropout e dropout recorrente\n#4 - Camada Densa com 1 saída, transformei em uma tarefa de classificação binária para ficar mais simples\n#e a camada tem um output de probabilidade, se for >0.5 vai ser 1, se for <0.5 vai ser 0.\n\ndef lstm_model():\n    model = Sequential()\n    model.add(Embedding(input_dim=len(tokenizer.word_index)+1, output_dim=embedding_dim))\n    model.add(SpatialDropout1D(0.2))\n    model.add(LSTM(units=128, dropout=0.2, recurrent_dropout=0.2))\n    model.add(Dense(1, activation='sigmoid'))\n    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n    return model\n\n#Modelo CNN\n#1 - Camada de embedding -> transforma para vetores densos\n#2 - Camada de Dropout1D nas embeddings\n#3 - Camada de Convolução 1D - 128 unidades e ativação relu\n#4 - Camada de Dropout\n#5 - Camada de Convolução 1D - 32 unidades e ativação relu\n#6 - Camada de Dropout\n#7 - Camada de Global Max Pooling 1D\n#8 - Camada de saída, igual a do LSTM\n\ndef cnn_model():\n    model = Sequential()\n    model.add(Embedding(input_dim=len(tokenizer.word_index)+1, output_dim=embedding_dim))\n    model.add(SpatialDropout1D(0.2))\n    model.add(Conv1D(filters=128, kernel_size=5, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Conv1D(filters=32, kernel_size=5, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(GlobalMaxPooling1D())\n    model.add(Dense(1, activation='sigmoid'))\n    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n    return model","metadata":{"execution":{"iopub.status.busy":"2024-06-17T04:35:24.863282Z","iopub.execute_input":"2024-06-17T04:35:24.863959Z","iopub.status.idle":"2024-06-17T04:35:24.874810Z","shell.execute_reply.started":"2024-06-17T04:35:24.863926Z","shell.execute_reply":"2024-06-17T04:35:24.873920Z"},"trusted":true},"execution_count":49,"outputs":[]},{"cell_type":"code","source":"df_csv = pd.read_excel(\"/kaggle/input/dados-case/dados_case_ds.xlsx\")\n\ndf_csv['Conteúdo'] = df_csv['Conteúdo'].astype(str).apply(clean_text)\n\n#Remoção de stopwords e tokenização\nstop_words = set(stopwords.words('portuguese'))\ndf_csv['Conteúdo'] = df_csv['Conteúdo'].apply(word_tokenize)\ndf_csv['Conteúdo'] = df_csv['Conteúdo'].apply(lambda x: [word for word in x if word not in stop_words])","metadata":{"execution":{"iopub.status.busy":"2024-06-17T04:35:25.471409Z","iopub.execute_input":"2024-06-17T04:35:25.471863Z","iopub.status.idle":"2024-06-17T04:35:52.530328Z","shell.execute_reply.started":"2024-06-17T04:35:25.471832Z","shell.execute_reply":"2024-06-17T04:35:52.529466Z"},"trusted":true},"execution_count":50,"outputs":[]},{"cell_type":"code","source":"df_csv.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-17T04:35:52.531847Z","iopub.execute_input":"2024-06-17T04:35:52.532162Z","iopub.status.idle":"2024-06-17T04:35:52.546477Z","shell.execute_reply.started":"2024-06-17T04:35:52.532136Z","shell.execute_reply":"2024-06-17T04:35:52.545625Z"},"trusted":true},"execution_count":51,"outputs":[{"execution_count":51,"output_type":"execute_result","data":{"text/plain":"  Sentimento                                             Título  \\\n0   Positivo  Dono da Cyrela gaúcha pede doação, gasta com a...   \n1   Positivo  Operadoras de telefonia reforçam sinal de inte...   \n2   Positivo  Chuvas no RS: uso de internet cai pela metade ...   \n3   Positivo                                              Vagas   \n4   Positivo  Operadoras dão gigabytes extras para quem cont...   \n\n                                            Conteúdo  \n0  [tragédia, decorrente, temporais, rio, grande,...  \n1  [previsão, milhão, pessoas, praia, copacabana,...  \n2  [chuvas, rs, uso, internet, cai, metade, obstá...  \n3  [vagas, grupo, img, international, meai, compa...  \n4  [operadoras, dão, gigabytes, extras, contratar...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Sentimento</th>\n      <th>Título</th>\n      <th>Conteúdo</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Positivo</td>\n      <td>Dono da Cyrela gaúcha pede doação, gasta com a...</td>\n      <td>[tragédia, decorrente, temporais, rio, grande,...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Positivo</td>\n      <td>Operadoras de telefonia reforçam sinal de inte...</td>\n      <td>[previsão, milhão, pessoas, praia, copacabana,...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Positivo</td>\n      <td>Chuvas no RS: uso de internet cai pela metade ...</td>\n      <td>[chuvas, rs, uso, internet, cai, metade, obstá...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Positivo</td>\n      <td>Vagas</td>\n      <td>[vagas, grupo, img, international, meai, compa...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Positivo</td>\n      <td>Operadoras dão gigabytes extras para quem cont...</td>\n      <td>[operadoras, dão, gigabytes, extras, contratar...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#mapear os rótulos\nlabel_encoder = LabelEncoder()\ndf_csv['Sentimento'] = label_encoder.fit_transform(df_csv['Sentimento'])\n\n#vetorização\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts(df_csv['Conteúdo'])\nX_train_sequences = tokenizer.texts_to_sequences(df_csv['Conteúdo'])\n\n#limitar para 100 caracteres\nmax_length = 100\nX_train_padded = pad_sequences(X_train_sequences, maxlen=max_length, padding='post')\n\n#conveter para númerico\ny_train = df_csv['Sentimento'].values","metadata":{"execution":{"iopub.status.busy":"2024-06-17T04:35:52.547368Z","iopub.execute_input":"2024-06-17T04:35:52.547639Z","iopub.status.idle":"2024-06-17T04:35:54.813373Z","shell.execute_reply.started":"2024-06-17T04:35:52.547598Z","shell.execute_reply":"2024-06-17T04:35:54.812604Z"},"trusted":true},"execution_count":52,"outputs":[]},{"cell_type":"code","source":"embedding_dim = 100\nbatch_size = 32\nepochs =10","metadata":{"execution":{"iopub.status.busy":"2024-06-17T04:35:54.814962Z","iopub.execute_input":"2024-06-17T04:35:54.815245Z","iopub.status.idle":"2024-06-17T04:35:54.819582Z","shell.execute_reply.started":"2024-06-17T04:35:54.815221Z","shell.execute_reply":"2024-06-17T04:35:54.818706Z"},"trusted":true},"execution_count":53,"outputs":[]},{"cell_type":"markdown","source":"### Teste 1 -  LSTM","metadata":{}},{"cell_type":"code","source":"accuracy = []\nrecall = []\nf1 = []\nk = 0\n\n#k-fold estratificado com k=5\nskf = StratifiedKFold(n_splits=5, shuffle=True)\n\nfor train_index, test_index in skf.split(X_train_padded, y_train):\n    \n    print(f\"\\nFOLD {k}\")\n    X_train_fold, X_test_fold = X_train_padded[train_index], X_train_padded[test_index]\n    y_train_fold, y_test_fold = y_train[train_index], y_train[test_index]\n    \n    model = lstm_model()\n    model.fit(X_train_fold, y_train_fold, epochs=epochs, batch_size=batch_size, verbose=2)\n\n    y_pred_proba = model.predict(X_test_fold, verbose=0)\n    y_pred_fold = (y_pred_proba > 0.5).astype(int)  \n    acc = accuracy_score(y_test_fold, y_pred_fold)\n    rec = recall_score(y_test_fold, y_pred_fold)\n    f = f1_score(y_test_fold, y_pred_fold)\n    \n    #Resultados\n    accuracy.append(acc)\n    recall.append(rec)\n    f1.append(f)\n    k+=1\n\nmean_accuracy = np.mean(accuracy)\nmean_recall = np.mean(recall)\nmean_f1 = np.mean(f1)\n\nprint(f'Acuracia: {mean_accuracy}')\nprint(f'Recall: {mean_recall}')\nprint(f'F1-score: {mean_f1}')","metadata":{"execution":{"iopub.status.busy":"2024-06-17T02:13:24.509814Z","iopub.execute_input":"2024-06-17T02:13:24.510135Z","iopub.status.idle":"2024-06-17T02:29:39.188547Z","shell.execute_reply.started":"2024-06-17T02:13:24.510105Z","shell.execute_reply":"2024-06-17T02:29:39.187500Z"},"trusted":true},"execution_count":55,"outputs":[{"name":"stdout","text":"\nFOLD 0\nEpoch 1/10\n130/130 - 21s - 164ms/step - accuracy: 0.8623 - loss: 0.3615\nEpoch 2/10\n130/130 - 19s - 148ms/step - accuracy: 0.9420 - loss: 0.1949\nEpoch 3/10\n130/130 - 19s - 149ms/step - accuracy: 0.9564 - loss: 0.1433\nEpoch 4/10\n130/130 - 19s - 142ms/step - accuracy: 0.9581 - loss: 0.1295\nEpoch 5/10\n130/130 - 21s - 163ms/step - accuracy: 0.9716 - loss: 0.0939\nEpoch 6/10\n130/130 - 19s - 147ms/step - accuracy: 0.9742 - loss: 0.0804\nEpoch 7/10\n130/130 - 19s - 145ms/step - accuracy: 0.9726 - loss: 0.0780\nEpoch 8/10\n130/130 - 19s - 147ms/step - accuracy: 0.9721 - loss: 0.0811\nEpoch 9/10\n130/130 - 20s - 156ms/step - accuracy: 0.9701 - loss: 0.0823\nEpoch 10/10\n130/130 - 19s - 144ms/step - accuracy: 0.9689 - loss: 0.0853\n\nFOLD 1\nEpoch 1/10\n130/130 - 23s - 179ms/step - accuracy: 0.8642 - loss: 0.3430\nEpoch 2/10\n130/130 - 20s - 151ms/step - accuracy: 0.9451 - loss: 0.1830\nEpoch 3/10\n130/130 - 20s - 153ms/step - accuracy: 0.9480 - loss: 0.1726\nEpoch 4/10\n130/130 - 20s - 156ms/step - accuracy: 0.9586 - loss: 0.1264\nEpoch 5/10\n130/130 - 21s - 158ms/step - accuracy: 0.9680 - loss: 0.1034\nEpoch 6/10\n130/130 - 21s - 158ms/step - accuracy: 0.9697 - loss: 0.0968\nEpoch 7/10\n130/130 - 20s - 156ms/step - accuracy: 0.9627 - loss: 0.1017\nEpoch 8/10\n130/130 - 20s - 156ms/step - accuracy: 0.9697 - loss: 0.0811\nEpoch 9/10\n130/130 - 20s - 152ms/step - accuracy: 0.9750 - loss: 0.0693\nEpoch 10/10\n130/130 - 20s - 151ms/step - accuracy: 0.9791 - loss: 0.0617\n\nFOLD 2\nEpoch 1/10\n130/130 - 22s - 169ms/step - accuracy: 0.8707 - loss: 0.3388\nEpoch 2/10\n130/130 - 19s - 149ms/step - accuracy: 0.9506 - loss: 0.1771\nEpoch 3/10\n130/130 - 21s - 160ms/step - accuracy: 0.9576 - loss: 0.1460\nEpoch 4/10\n130/130 - 20s - 151ms/step - accuracy: 0.9610 - loss: 0.1347\nEpoch 5/10\n130/130 - 20s - 151ms/step - accuracy: 0.9653 - loss: 0.1065\nEpoch 6/10\n130/130 - 19s - 149ms/step - accuracy: 0.9641 - loss: 0.1062\nEpoch 7/10\n130/130 - 19s - 149ms/step - accuracy: 0.9704 - loss: 0.0873\nEpoch 8/10\n130/130 - 20s - 155ms/step - accuracy: 0.9735 - loss: 0.0845\nEpoch 9/10\n130/130 - 19s - 150ms/step - accuracy: 0.9726 - loss: 0.0810\nEpoch 10/10\n130/130 - 20s - 150ms/step - accuracy: 0.9791 - loss: 0.0663\n\nFOLD 3\nEpoch 1/10\n130/130 - 20s - 152ms/step - accuracy: 0.8520 - loss: 0.3636\nEpoch 2/10\n130/130 - 17s - 133ms/step - accuracy: 0.9288 - loss: 0.2351\nEpoch 3/10\n130/130 - 18s - 135ms/step - accuracy: 0.9437 - loss: 0.1812\nEpoch 4/10\n130/130 - 17s - 133ms/step - accuracy: 0.9562 - loss: 0.1440\nEpoch 5/10\n130/130 - 21s - 160ms/step - accuracy: 0.9675 - loss: 0.1025\nEpoch 6/10\n130/130 - 17s - 135ms/step - accuracy: 0.9656 - loss: 0.1131\nEpoch 7/10\n130/130 - 17s - 134ms/step - accuracy: 0.9656 - loss: 0.0962\nEpoch 8/10\n130/130 - 18s - 136ms/step - accuracy: 0.9718 - loss: 0.0817\nEpoch 9/10\n130/130 - 17s - 133ms/step - accuracy: 0.9776 - loss: 0.0697\nEpoch 10/10\n130/130 - 17s - 134ms/step - accuracy: 0.9779 - loss: 0.0628\n\nFOLD 4\nEpoch 1/10\n130/130 - 20s - 155ms/step - accuracy: 0.8590 - loss: 0.3647\nEpoch 2/10\n130/130 - 18s - 137ms/step - accuracy: 0.9374 - loss: 0.2038\nEpoch 3/10\n130/130 - 18s - 139ms/step - accuracy: 0.9552 - loss: 0.1582\nEpoch 4/10\n130/130 - 18s - 139ms/step - accuracy: 0.9632 - loss: 0.1249\nEpoch 5/10\n130/130 - 18s - 141ms/step - accuracy: 0.9663 - loss: 0.1171\nEpoch 6/10\n130/130 - 18s - 139ms/step - accuracy: 0.9622 - loss: 0.1071\nEpoch 7/10\n130/130 - 18s - 138ms/step - accuracy: 0.9685 - loss: 0.0906\nEpoch 8/10\n130/130 - 18s - 138ms/step - accuracy: 0.9685 - loss: 0.0950\nEpoch 9/10\n130/130 - 18s - 141ms/step - accuracy: 0.9762 - loss: 0.0754\nEpoch 10/10\n130/130 - 18s - 141ms/step - accuracy: 0.9752 - loss: 0.0734\nAcuracia: 0.9297158413399575\nRecall: 0.9433977360149468\nF1-score: 0.9455147023612099\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Teste 2 - CNN","metadata":{}},{"cell_type":"code","source":"accuracy = []\nrecall = []\nf1 = []\nk = 0\n\n#k-fold estratificado com k=5\nskf = StratifiedKFold(n_splits=5, shuffle=True)\n\nfor train_index, test_index in skf.split(X_train_padded, y_train):\n    \n    print(f\"\\nFOLD {k}\")\n    X_train_fold, X_test_fold = X_train_padded[train_index], X_train_padded[test_index]\n    y_train_fold, y_test_fold = y_train[train_index], y_train[test_index]\n    \n    model = cnn_model()\n    model.fit(X_train_fold, y_train_fold, epochs=epochs, batch_size=batch_size, verbose=2)\n\n    y_pred_proba = model.predict(X_test_fold, verbose=0)\n    y_pred_fold = (y_pred_proba > 0.5).astype(int)  \n    acc = accuracy_score(y_test_fold, y_pred_fold)\n    rec = recall_score(y_test_fold, y_pred_fold)\n    f = f1_score(y_test_fold, y_pred_fold)\n    \n    #Resultados\n    accuracy.append(acc)\n    recall.append(rec)\n    f1.append(f)\n    k+=1\n\nmean_accuracy = np.mean(accuracy)\nmean_recall = np.mean(recall)\nmean_f1 = np.mean(f1)\n\nprint(f'Acuracia: {mean_accuracy}')\nprint(f'Recall: {mean_recall}')\nprint(f'F1-score: {mean_f1}')","metadata":{"execution":{"iopub.status.busy":"2024-06-17T02:29:39.189741Z","iopub.execute_input":"2024-06-17T02:29:39.190004Z","iopub.status.idle":"2024-06-17T02:30:53.701249Z","shell.execute_reply.started":"2024-06-17T02:29:39.189979Z","shell.execute_reply":"2024-06-17T02:30:53.700334Z"},"trusted":true},"execution_count":56,"outputs":[{"name":"stdout","text":"\nFOLD 0\nEpoch 1/10\n130/130 - 11s - 82ms/step - accuracy: 0.8264 - loss: 0.3607\nEpoch 2/10\n130/130 - 1s - 4ms/step - accuracy: 0.9547 - loss: 0.1278\nEpoch 3/10\n130/130 - 0s - 3ms/step - accuracy: 0.9701 - loss: 0.0846\nEpoch 4/10\n130/130 - 0s - 3ms/step - accuracy: 0.9764 - loss: 0.0681\nEpoch 5/10\n130/130 - 0s - 3ms/step - accuracy: 0.9810 - loss: 0.0596\nEpoch 6/10\n130/130 - 0s - 3ms/step - accuracy: 0.9812 - loss: 0.0565\nEpoch 7/10\n130/130 - 0s - 3ms/step - accuracy: 0.9807 - loss: 0.0497\nEpoch 8/10\n130/130 - 0s - 3ms/step - accuracy: 0.9810 - loss: 0.0494\nEpoch 9/10\n130/130 - 0s - 3ms/step - accuracy: 0.9798 - loss: 0.0500\nEpoch 10/10\n130/130 - 0s - 3ms/step - accuracy: 0.9836 - loss: 0.0445\n\nFOLD 1\nEpoch 1/10\n130/130 - 10s - 77ms/step - accuracy: 0.8197 - loss: 0.3670\nEpoch 2/10\n130/130 - 1s - 4ms/step - accuracy: 0.9526 - loss: 0.1395\nEpoch 3/10\n130/130 - 1s - 4ms/step - accuracy: 0.9704 - loss: 0.0875\nEpoch 4/10\n130/130 - 1s - 5ms/step - accuracy: 0.9781 - loss: 0.0686\nEpoch 5/10\n130/130 - 0s - 3ms/step - accuracy: 0.9807 - loss: 0.0580\nEpoch 6/10\n130/130 - 0s - 3ms/step - accuracy: 0.9817 - loss: 0.0544\nEpoch 7/10\n130/130 - 0s - 3ms/step - accuracy: 0.9819 - loss: 0.0499\nEpoch 8/10\n130/130 - 0s - 3ms/step - accuracy: 0.9834 - loss: 0.0466\nEpoch 9/10\n130/130 - 0s - 3ms/step - accuracy: 0.9844 - loss: 0.0428\nEpoch 10/10\n130/130 - 0s - 3ms/step - accuracy: 0.9853 - loss: 0.0397\n\nFOLD 2\nEpoch 1/10\n130/130 - 10s - 76ms/step - accuracy: 0.8291 - loss: 0.3630\nEpoch 2/10\n130/130 - 1s - 4ms/step - accuracy: 0.9526 - loss: 0.1377\nEpoch 3/10\n130/130 - 0s - 3ms/step - accuracy: 0.9663 - loss: 0.0945\nEpoch 4/10\n130/130 - 0s - 3ms/step - accuracy: 0.9774 - loss: 0.0718\nEpoch 5/10\n130/130 - 0s - 3ms/step - accuracy: 0.9786 - loss: 0.0620\nEpoch 6/10\n130/130 - 0s - 3ms/step - accuracy: 0.9800 - loss: 0.0578\nEpoch 7/10\n130/130 - 0s - 3ms/step - accuracy: 0.9824 - loss: 0.0508\nEpoch 8/10\n130/130 - 0s - 3ms/step - accuracy: 0.9807 - loss: 0.0516\nEpoch 9/10\n130/130 - 0s - 3ms/step - accuracy: 0.9829 - loss: 0.0489\nEpoch 10/10\n130/130 - 0s - 3ms/step - accuracy: 0.9831 - loss: 0.0468\n\nFOLD 3\nEpoch 1/10\n130/130 - 10s - 79ms/step - accuracy: 0.8236 - loss: 0.3618\nEpoch 2/10\n130/130 - 1s - 4ms/step - accuracy: 0.9473 - loss: 0.1407\nEpoch 3/10\n130/130 - 0s - 3ms/step - accuracy: 0.9716 - loss: 0.0845\nEpoch 4/10\n130/130 - 0s - 3ms/step - accuracy: 0.9781 - loss: 0.0656\nEpoch 5/10\n130/130 - 0s - 3ms/step - accuracy: 0.9817 - loss: 0.0559\nEpoch 6/10\n130/130 - 0s - 3ms/step - accuracy: 0.9817 - loss: 0.0555\nEpoch 7/10\n130/130 - 1s - 5ms/step - accuracy: 0.9836 - loss: 0.0481\nEpoch 8/10\n130/130 - 1s - 5ms/step - accuracy: 0.9858 - loss: 0.0457\nEpoch 9/10\n130/130 - 0s - 3ms/step - accuracy: 0.9863 - loss: 0.0390\nEpoch 10/10\n130/130 - 0s - 3ms/step - accuracy: 0.9875 - loss: 0.0426\n\nFOLD 4\nEpoch 1/10\n130/130 - 10s - 76ms/step - accuracy: 0.8270 - loss: 0.3599\nEpoch 2/10\n130/130 - 1s - 4ms/step - accuracy: 0.9545 - loss: 0.1342\nEpoch 3/10\n130/130 - 0s - 3ms/step - accuracy: 0.9738 - loss: 0.0835\nEpoch 4/10\n130/130 - 0s - 3ms/step - accuracy: 0.9793 - loss: 0.0674\nEpoch 5/10\n130/130 - 0s - 3ms/step - accuracy: 0.9834 - loss: 0.0583\nEpoch 6/10\n130/130 - 0s - 3ms/step - accuracy: 0.9832 - loss: 0.0543\nEpoch 7/10\n130/130 - 0s - 3ms/step - accuracy: 0.9836 - loss: 0.0492\nEpoch 8/10\n130/130 - 0s - 3ms/step - accuracy: 0.9848 - loss: 0.0444\nEpoch 9/10\n130/130 - 0s - 3ms/step - accuracy: 0.9846 - loss: 0.0450\nEpoch 10/10\n130/130 - 0s - 3ms/step - accuracy: 0.9860 - loss: 0.0410\nAcuracia: 0.941076438920631\nRecall: 0.9596922738762501\nF1-score: 0.954929980838525\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Teste 3 - Ensemble","metadata":{}},{"cell_type":"code","source":"accuracy = []\nrecall = []\nf1 = []\nk = 0\n\n#K-fold estratificado com k=5\nskf = StratifiedKFold(n_splits=5, shuffle=True)\n\nfor train_index, test_index in skf.split(X_train_padded, y_train):\n    print(f\"\\nFOLD {k}\")\n    X_train_fold, X_test_fold = X_train_padded[train_index], X_train_padded[test_index]\n    y_train_fold, y_test_fold = y_train[train_index], y_train[test_index]\n    \n    #LSTM\n    lstm = lstm_model()\n    lstm.fit(X_train_fold, y_train_fold, epochs=epochs, batch_size=batch_size, verbose=2)\n    y_pred_proba_lstm = lstm.predict(X_test_fold, verbose=0)\n    \n    #CNN\n    cnn = cnn_model()\n    cnn.fit(X_train_fold, y_train_fold, epochs=epochs, batch_size=batch_size, verbose=2)\n    y_pred_proba_cnn = cnn.predict(X_test_fold, verbose=0)\n    \n    #Votação 0.45 a 0.55 de peso para cada modelo\n    y_pred_proba = (0.45*y_pred_proba_lstm + 0.55*y_pred_proba_cnn) \n    y_pred_fold = (y_pred_proba > 0.5).astype(int)\n    \n    #Resultados\n    acc = accuracy_score(y_test_fold, y_pred_fold)\n    rec = recall_score(y_test_fold, y_pred_fold)\n    f = f1_score(y_test_fold, y_pred_fold)\n    \n    accuracy.append(acc)\n    recall.append(rec)\n    f1.append(f)\n    k += 1\n\nmean_accuracy = np.mean(accuracy)\nmean_recall = np.mean(recall)\nmean_f1 = np.mean(f1)\n\nprint(f'Acuracia: {mean_accuracy}')\nprint(f'Recall: {mean_recall}')\nprint(f'F1-score: {mean_f1}')\n","metadata":{"execution":{"iopub.status.busy":"2024-06-17T04:53:17.671300Z","iopub.execute_input":"2024-06-17T04:53:17.671686Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stdout","text":"\nFOLD 0\nEpoch 1/10\n130/130 - 20s - 155ms/step - accuracy: 0.8467 - loss: 0.4063\nEpoch 2/10\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}